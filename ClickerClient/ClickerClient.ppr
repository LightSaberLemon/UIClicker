{
    Copyright (C) 2022 VCC
    creation date: Jul 2022
    initial release date: 26 Jul 2022

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

library ClickerClient;

{$H+}
{$IFDEF FPC}
  //{$MODE Delphi}
{$ENDIF}

uses
  Interfaces, Windows, SysUtils, Classes, Controls, Forms, ShellAPI, Graphics,
  DllUtils, InMemFileSystem, ClickerActionsClient, ClickerUtils, ClickerTemplates,
  ClickerFileProviderClient;


var
  InMemFS: TInMemFileSystem = nil;
  FRemoteAddress: string;
  FAllVarReplacements: TStringList = nil;
  FPollForMissingServerFilesTh: TPollForMissingServerFiles = nil;


type
  TClkClickOptionsAPI = record
    XClickPointReference: TXClickPointReference;
    YClickPointReference: TYClickPointReference;
    XClickPointVar: PWideChar;
    YClickPointVar: PWideChar;
    XOffset, YOffset: PWideChar;
    MouseButton: TMouseButton;
    ClickWithCtrl: Boolean;
    ClickWithAlt: Boolean;
    ClickWithShift: Boolean;
    ClickWithDoubleClick: Boolean;
    Count: LongInt;
    LeaveMouse: Boolean;
    MoveWithoutClick: Boolean;
    ClickType: LongInt;    //see CClickType_Click and CClickType_DoubleClick
    XClickPointReferenceDest: TXClickPointReference;
    YClickPointReferenceDest: TYClickPointReference;
    XClickPointVarDest: PWideChar;
    YClickPointVarDest: PWideChar;
    XOffsetDest, YOffsetDest: PWideChar;
  end;

  PClkClickOptionsAPI = ^TClkClickOptionsAPI;


  TClkExecAppOptionsAPI = record
    PathToApp: PWideChar;
    ListOfParams: PWideChar;
    WaitForApp: Boolean;
    AppStdIn: PWideChar;
    CurrentDir: PWideChar;
    UseInheritHandles: TExecAppUseInheritHandles;
  end;

  PClkExecAppOptionsAPI = ^TClkExecAppOptionsAPI;


  TClkFindControlOptionsAPI = record
    DummyField: Integer;    //required for proper alignment (otherwise, there is an AV in Python)
    MatchCriteria: TClkFindControlMatchCriteria;
    AllowToFail: Boolean;
    MatchText: PWideChar;
    MatchClassName: PWideChar;
    MatchTextSeparator: PWideChar;
    MatchClassNameSeparator: PWideChar;
    MatchBitmapText: Pointer; //TClkFindControlMatchBitmapTextArr;
    MatchBitmapFiles: PWideChar;
    MatchBitmapAlgorithm: TMatchBitmapAlgorithm;
    MatchBitmapAlgorithmSettings: TMatchBitmapAlgorithmSettings;
    InitialRectangle: TRectString;
    UseWholeScreen: Boolean;
    ColorError: PWideChar;
    AllowedColorErrorCount: PWideChar;
    WaitForControlToGoAway: Boolean;
    StartSearchingWithCachedControl: Boolean;
    CachedControlLeft: PWideChar;
    CachedControlTop: PWideChar;
  end;

  PClkFindControlOptionsAPI = ^TClkFindControlOptionsAPI;


  TClkSetTextOptionsAPI = record
    Text: PWideChar;
    ControlType: TClkSetTextControlType;
  end;

  PClkSetTextOptionsAPI = ^TClkSetTextOptionsAPI;


  TClkCallTemplateLoopOptionsAPI = record
    Enabled: Boolean; //When False, the CallTemplate action is executed once, as before. Else, it may be executed or not, based on loop settings.
    Counter: PWideChar;
    InitValue: PWideChar;
    EndValue: PWideChar;
    Direction: TLoopDirection;
    BreakCondition: PWideChar; //uses the same format as TClkActionOptions.ActionCondition
    EvalBreakPosition: TLoopEvalBreakPosition;
  end;

  TClkCallTemplateOptionsAPI = record
    TemplateFileName: PWideChar;
    ListOfCustomVarsAndValues: PWideChar;
    EvaluateBeforeCalling: Boolean;
    CallTemplateLoop: TClkCallTemplateLoopOptionsAPI;
  end;

  PClkCallTemplateOptionsAPI = ^TClkCallTemplateOptionsAPI;


  TClkSleepOptionsAPI = record
    Value: string;  // [ms]
  end;

  PClkSleepOptionsAPI = ^TClkSleepOptionsAPI;


  TClkSetVarOptionsAPI = record
    ListOfVarNames: PWideChar;
    ListOfVarValues: PWideChar;
    ListOfVarEvalBefore: PWideChar;
  end;

  PClkSetVarOptionsAPI = ^TClkSetVarOptionsAPI;


  TClkWindowOperationsAPI = record
    Operation: TWindowOperation;
    NewX, NewY, NewWidth, NewHeight: PWideChar;
    NewPositionEnabled, NewSizeEnabled: Boolean;
  end;

  PClkWindowOperationsAPI = ^TClkWindowOperationsAPI;


  TClkFindControlMatchBitmapTextAPI = record
    ForegroundColor: PWideChar;
    BackgroundColor: PWideChar;
    FontName: PWideChar;
    FontSize: LongInt;
    Bold: Boolean;
    Italic: Boolean;
    Underline: Boolean;
    StrikeOut: Boolean;
    FontQuality: TFontQuality;
    FontQualityUsesReplacement: Boolean;
    FontQualityReplacement: PWideChar;
    ProfileName: PWideChar;
  end;

  PClkFindControlMatchBitmapTextAPI = ^TClkFindControlMatchBitmapTextAPI;


  TExHandler = class
    procedure CustomExceptionHandler(Sender: TObject; E: Exception);
  end;

var
  FExHandler: TExHandler;


procedure TExHandler.CustomExceptionHandler(Sender: TObject; E: Exception);
var
  ClName, EMsg: string;
  ExceptionLog: TStringList;
  LogPath: string;
begin
  try
    ClName := Sender.ClassName;
  except
    ClName := '';
  end;

  try
    EMsg := E.Message;
  except
    EMsg := '';
  end;

  try
    ExceptionLog := TStringList.Create;
    try
      ExceptionLog.Add(DateTimeToStr(Now));
      ExceptionLog.Add('Custom exception: ' + EMsg);
      ExceptionLog.Add('Class: ' + ClName);

      LogPath := ExtractFilePath(ParamStr(0)) + 'ClickerClientExceptions.txt';
      ExceptionLog.Add('This file was saved as: ' + LogPath);
      ExceptionLog.SaveToFile(LogPath);

      LogPath := '"' + LogPath + '"';
      ShellExecute(0, 'open', 'C:\Windows\Notepad.exe', PChar(LogPath), '', SW_SHOW);

      //MessageBox(0, PChar(ExceptionLog.Text), 'Clicker', MB_ICONERROR);  //the application crashes after displaying the MessageBox, so the MessageBox is closed
    finally
      ExceptionLog.Free;
    end;
  except
    on EE: Exception do
      MessageBox(0, PChar('Ex on custom exception: ' + EE.Message), 'Clicker', MB_ICONERROR);
  end;
end;


//see https://wiki.freepascal.org/Logging_exceptions
procedure CatchUnhandledException(Obj: TObject; Addr: Pointer; FrameCount: LongInt; Frames: PPointer);
var
  Msg: string;
  i: Integer;
  ExceptionLog: TStringList;
  LogPath: string;
begin
  try //use another try..excempt, just in case parsing the stack would raise more exceptions
    Msg := 'Unhandled exception at adddr $' + SysBacktraceStr(Addr) + ':' + #13#10;

    if Obj is Exception then
      Msg := Msg + Exception(Obj).ClassName + ' : ' + Exception(Obj).Message
    else
      Msg := Msg + 'Exception object '  + Exception(Obj).ClassName + ' is not class Exception.';

    Msg := Msg + #13#10;
    Msg := Msg + BacktraceStrFunc(Addr) + #13#10;

    for i := 0 to FrameCount - 1 do
      Msg := Msg + BacktraceStrFunc(Frames[i]) + #13#10;

    ExceptionLog := TStringList.Create;
    try
      ExceptionLog.Add(DateTimeToStr(Now));
      ExceptionLog.Add('Unhandled exception: ' + Msg);

      LogPath := ExtractFilePath(ParamStr(0)) + 'ClickerClientUnhandledExceptions.txt';
      ExceptionLog.Add('This file was saved as: ' + LogPath);
      ExceptionLog.SaveToFile(LogPath);

      LogPath := '"' + LogPath + '"';
      ShellExecute(0, 'open', 'C:\Windows\Notepad.exe', PChar(LogPath), '', SW_SHOW);

      //MessageBox(0, PChar(Msg), 'Clicker', MB_ICONERROR);
    finally
      ExceptionLog.Free;
    end;
  except
  end;
end;


procedure InitClickerClient; cdecl;
begin
  InMemFS := TInMemFileSystem.Create;
  FRemoteAddress := 'http://127.0.0.1:5444/';
  FAllVarReplacements := TStringList.Create;

  ExceptProc := @CatchUnhandledException;
  FExHandler := TExHandler.Create;  /////////////////////////// probably, it will have to be freed
  Application.Initialize;
  Application.OnException := FExHandler.CustomExceptionHandler;

  FPollForMissingServerFilesTh := TPollForMissingServerFiles.Create(True);
  FPollForMissingServerFilesTh.RemoteAddress := FRemoteAddress;
end;


procedure DoneClickerClient; cdecl;
begin
  FreeAndNil(InMemFS);
  FreeAndNil(FAllVarReplacements);
  FreeAndNil(FPollForMissingServerFilesTh);
end;


procedure SetServerAddress(AAddress: Pointer); cdecl;
begin
  SetPointedContentToString(@string(PWideChar(AAddress))[1], FRemoteAddress);

  if FPollForMissingServerFilesTh <> nil then
    FPollForMissingServerFilesTh.RemoteAddress := FRemoteAddress;
end;


function GetServerAddress(AResponse: Pointer): LongInt; cdecl;
begin
  try
    Result := SetPointedContentFromString(FRemoteAddress, AResponse);
  except
    on E: Exception do
      Result := SetPointedContentFromString(E.Message, AResponse);
  end;
end;


function TestConnectionToServer(AResponse: Pointer): LongInt; cdecl;
var
  Response: string;
begin
  try
    Response := SendTextRequestToServer(FRemoteAddress + CRECmd_TestConnection);
    Result := SetPointedContentFromString(Response, AResponse);
  except
    on E: Exception do
      Result := SetPointedContentFromString(E.Message, AResponse);
  end;
end;


function CreateNewTemplateStr(ATemplateFileName: string): Integer;
begin
  if InMemFS = nil then
  begin
    Result := -1;
    Exit;
  end;

  if InMemFS.FileExistsInMem(ATemplateFileName) then
  begin
    Result := 1;   /////////////////// ToDo: define some constants for standard responses
    Exit;
  end;

  InMemFS.SaveFileToMem(ATemplateFileName, nil, 0);
  Result := 0; //0 means ok
end;


//Creates a new template file, in dll's in-mem file system.
//This template (after being filled in) will have to be sent to server and executed there.
function CreateNewTemplate(ATemplateFileName: Pointer): LongInt; cdecl;
var
  TemplateFileName: string;
begin
  SetPointedContentToString(@string(PWideChar(ATemplateFileName))[1], TemplateFileName);
  Result := CreateNewTemplateStr(TemplateFileName);
end;


procedure AddActionToTemplate(ATemplateFileName: string; AClkAction: TClkActionRec);
var
  ClkActions: TClkActionsRecArr;
  MemStream: TMemoryStream;
  n: Integer;
  DummyNotes: string;
begin
  if not InMemFS.FileExistsInMem(ATemplateFileName) then
    CreateNewTemplateStr(ATemplateFileName);

  MemStream := TMemoryStream.Create;
  try
    InMemFS.LoadFileFromMemToStream(ATemplateFileName, MemStream);
    MemStream.Position := 0;

    GetTemplateContentFromMemoryStream(ClkActions, DummyNotes, MemStream);

    n := Length(ClkActions);
    SetLength(ClkActions, n + 1);
    CopyActionContent(AClkAction, ClkActions[n]);

    MemStream.Clear;
    GetTemplateContentAsMemoryStream(ClkActions, DummyNotes, MemStream);
    InMemFS.SaveFileToMem(ATemplateFileName, MemStream.Memory, MemStream.Size);
  finally
    MemStream.Free;
  end;
end;


procedure SetBasicActionOptions(ATemplateFileName: Pointer;
                                AActionName: Pointer;
                                Action: TClkAction;
                                AActionTimeout: LongInt; //ms
                                AActionEnabled: Boolean;
                                AActionCondition: Pointer;
                                var ATempAction: TClkActionRec;
                                var TemplateFileName: string);
var
  ActionName: string;
  ActionCondition: string;
begin
  SetPointedContentToString(@string(PWideChar(ATemplateFileName))[1], TemplateFileName);
  SetPointedContentToString(@string(PWideChar(AActionName))[1], ActionName);
  SetPointedContentToString(@string(PWideChar(AActionCondition))[1], ActionCondition);

  ATempAction.ActionOptions.ActionName := ActionName;
  ATempAction.ActionOptions.Action := Action;
  ATempAction.ActionOptions.ActionTimeout := AActionTimeout;
  ATempAction.ActionOptions.ActionEnabled := AActionEnabled;
  ATempAction.ActionOptions.ActionCondition := ActionCondition;
end;


function AddClickActionToTemplate(ATemplateFileName: Pointer;

                                  AActionName: Pointer;
                                  AActionTimeout: LongInt; //ms
                                  AActionEnabled: Boolean;
                                  AActionCondition: Pointer;

                                  AClickOptions: PClkClickOptionsAPI

                                  ): LongInt; cdecl;
var
  TemplateFileName: string;
  TempAction: TClkActionRec;
begin
  if InMemFS = nil then
  begin
    Result := -1;
    Exit;
  end;

  SetBasicActionOptions(ATemplateFileName, AActionName, acClick, AActionTimeout, AActionEnabled, AActionCondition, TempAction, TemplateFileName);

  //click stuff
  TempAction.ClickOptions.XClickPointReference := AClickOptions^.XClickPointReference; //xrefLeft;
  TempAction.ClickOptions.YClickPointReference := AClickOptions^.YClickPointReference; //yrefTop;
  SetPointedContentToString(@string(PWideChar(AClickOptions^.XClickPointVar))[1], TempAction.ClickOptions.XClickPointVar);
  SetPointedContentToString(@string(PWideChar(AClickOptions^.YClickPointVar))[1], TempAction.ClickOptions.YClickPointVar);
  SetPointedContentToString(@string(PWideChar(AClickOptions^.XOffset))[1], TempAction.ClickOptions.XOffset);
  SetPointedContentToString(@string(PWideChar(AClickOptions^.YOffset))[1], TempAction.ClickOptions.YOffset);
  TempAction.ClickOptions.MouseButton := AClickOptions^.MouseButton;
  TempAction.ClickOptions.ClickWithCtrl := AClickOptions^.ClickWithCtrl;
  TempAction.ClickOptions.ClickWithAlt := AClickOptions^.ClickWithAlt;
  TempAction.ClickOptions.ClickWithShift := AClickOptions^.ClickWithShift;
  TempAction.ClickOptions.ClickWithDoubleClick := AClickOptions^.ClickWithDoubleClick;
  TempAction.ClickOptions.Count := AClickOptions^.Count;
  TempAction.ClickOptions.LeaveMouse := AClickOptions^.LeaveMouse;
  TempAction.ClickOptions.MoveWithoutClick := AClickOptions^.MoveWithoutClick;
  TempAction.ClickOptions.ClickType := AClickOptions^.ClickType;
  TempAction.ClickOptions.XClickPointReferenceDest := AClickOptions^.XClickPointReferenceDest;
  TempAction.ClickOptions.YClickPointReferenceDest := AClickOptions^.YClickPointReferenceDest;
  SetPointedContentToString(@string(PWideChar(AClickOptions^.XClickPointVarDest))[1], TempAction.ClickOptions.XClickPointVarDest);
  SetPointedContentToString(@string(PWideChar(AClickOptions^.YClickPointVarDest))[1], TempAction.ClickOptions.YClickPointVarDest);
  SetPointedContentToString(@string(PWideChar(AClickOptions^.XOffsetDest))[1], TempAction.ClickOptions.XOffsetDest);
  SetPointedContentToString(@string(PWideChar(AClickOptions^.YOffsetDest))[1], TempAction.ClickOptions.YOffsetDest);

  AddActionToTemplate(TemplateFileName, TempAction);
  Result := 0;
end;


function AddExecAppActionToTemplate(ATemplateFileName: Pointer;

                                    AActionName: Pointer;
                                    AActionTimeout: LongInt; //ms
                                    AActionEnabled: Boolean;
                                    AActionCondition: Pointer;

                                    AExecAppOptions: PClkExecAppOptionsAPI

                                   ): LongInt; cdecl;
var
  TemplateFileName: string;
  TempAction: TClkActionRec;
begin
  if InMemFS = nil then
  begin
    Result := -1;
    Exit;
  end;

  SetBasicActionOptions(ATemplateFileName, AActionName, acExecApp, AActionTimeout, AActionEnabled, AActionCondition, TempAction, TemplateFileName);

  //exec app stuff
  SetPointedContentToString(@string(PWideChar(AExecAppOptions^.PathToApp))[1], TempAction.ExecAppOptions.PathToApp);
  SetPointedContentToString(@string(PWideChar(AExecAppOptions^.ListOfParams))[1], TempAction.ExecAppOptions.ListOfParams);
  TempAction.ExecAppOptions.WaitForApp := AExecAppOptions^.WaitForApp;
  SetPointedContentToString(@string(PWideChar(AExecAppOptions^.AppStdIn))[1], TempAction.ExecAppOptions.AppStdIn);
  SetPointedContentToString(@string(PWideChar(AExecAppOptions^.CurrentDir))[1], TempAction.ExecAppOptions.CurrentDir);
  TempAction.ExecAppOptions.UseInheritHandles := AExecAppOptions^.UseInheritHandles;

  AddActionToTemplate(TemplateFileName, TempAction);
  Result := 0;
end;


function Add_FindControl_ActionToTemplate(ATemplateFileName: Pointer;

                                        AActionName: Pointer;
                                        AAction: TClkAction;
                                        AActionTimeout: LongInt; //ms
                                        AActionEnabled: Boolean;
                                        AActionCondition: Pointer;

                                        AFindControlOptions: PClkFindControlOptionsAPI

                                       ): LongInt;
var
  TemplateFileName: string;
  TempAction: TClkActionRec;
begin
  if InMemFS = nil then
  begin
    Result := -1;
    Exit;
  end;

  SetBasicActionOptions(ATemplateFileName, AActionName, AAction, AActionTimeout, AActionEnabled, AActionCondition, TempAction, TemplateFileName);

  //find control stuff
  TempAction.FindControlOptions.MatchCriteria.WillMatchText := AFindControlOptions^.MatchCriteria.WillMatchText;
  TempAction.FindControlOptions.MatchCriteria.WillMatchClassName := AFindControlOptions^.MatchCriteria.WillMatchClassName;
  TempAction.FindControlOptions.MatchCriteria.WillMatchBitmapText := AFindControlOptions^.MatchCriteria.WillMatchBitmapText;
  TempAction.FindControlOptions.MatchCriteria.WillMatchBitmapFiles := AFindControlOptions^.MatchCriteria.WillMatchBitmapFiles;
  TempAction.FindControlOptions.MatchCriteria.SearchForControlMode := AFindControlOptions^.MatchCriteria.SearchForControlMode;

  TempAction.FindControlOptions.AllowToFail := AFindControlOptions^.AllowToFail;
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.MatchText))[1], TempAction.FindControlOptions.MatchText);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.MatchClassName))[1], TempAction.FindControlOptions.MatchClassName);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.MatchTextSeparator))[1], TempAction.FindControlOptions.MatchTextSeparator);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.MatchClassNameSeparator))[1], TempAction.FindControlOptions.MatchClassNameSeparator);
  SetLength(TempAction.FindControlOptions.MatchBitmapText, 0);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.MatchBitmapFiles))[1], TempAction.FindControlOptions.MatchBitmapFiles);
  TempAction.FindControlOptions.MatchBitmapAlgorithm := AFindControlOptions^.MatchBitmapAlgorithm;

  TempAction.FindControlOptions.MatchBitmapAlgorithmSettings := AFindControlOptions^.MatchBitmapAlgorithmSettings;
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.InitialRectangle.Left))[1], TempAction.FindControlOptions.InitialRectangle.Left);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.InitialRectangle.Top))[1], TempAction.FindControlOptions.InitialRectangle.Top);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.InitialRectangle.Right))[1], TempAction.FindControlOptions.InitialRectangle.Right);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.InitialRectangle.Bottom))[1], TempAction.FindControlOptions.InitialRectangle.Bottom);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.InitialRectangle.LeftOffset))[1], TempAction.FindControlOptions.InitialRectangle.LeftOffset);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.InitialRectangle.TopOffset))[1], TempAction.FindControlOptions.InitialRectangle.TopOffset);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.InitialRectangle.RightOffset))[1], TempAction.FindControlOptions.InitialRectangle.RightOffset);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.InitialRectangle.BottomOffset))[1], TempAction.FindControlOptions.InitialRectangle.BottomOffset);

  TempAction.FindControlOptions.UseWholeScreen := AFindControlOptions^.UseWholeScreen;
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.ColorError))[1], TempAction.FindControlOptions.ColorError);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.AllowedColorErrorCount))[1], TempAction.FindControlOptions.AllowedColorErrorCount);
  TempAction.FindControlOptions.WaitForControlToGoAway := AFindControlOptions^.WaitForControlToGoAway;
  TempAction.FindControlOptions.StartSearchingWithCachedControl := AFindControlOptions^.StartSearchingWithCachedControl;
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.CachedControlLeft))[1], TempAction.FindControlOptions.CachedControlLeft);
  SetPointedContentToString(@string(PWideChar(AFindControlOptions^.CachedControlTop))[1], TempAction.FindControlOptions.CachedControlTop);

  AddActionToTemplate(TemplateFileName, TempAction);
  Result := 0;
end;


function AddFindControlActionToTemplate(ATemplateFileName: Pointer;

                                        AActionName: Pointer;
                                        AActionTimeout: LongInt; //ms
                                        AActionEnabled: Boolean;
                                        AActionCondition: Pointer;

                                        AFindControlOptions: PClkFindControlOptionsAPI

                                       ): LongInt; cdecl;
begin
  Result := Add_FindControl_ActionToTemplate(ATemplateFileName, AActionName, acFindControl, AActionTimeout, AActionEnabled, AActionCondition, AFindControlOptions);
end;


function AddFindSubControlActionToTemplate(ATemplateFileName: Pointer;

                                           AActionName: Pointer;
                                           AActionTimeout: LongInt; //ms
                                           AActionEnabled: Boolean;
                                           AActionCondition: Pointer;

                                           AFindControlOptions: PClkFindControlOptionsAPI

                                          ): LongInt; cdecl;
begin
  Result := Add_FindControl_ActionToTemplate(ATemplateFileName, AActionName, acFindSubControl, AActionTimeout, AActionEnabled, AActionCondition, AFindControlOptions);
end;


function AddSetControlTextActionToTemplate(ATemplateFileName: Pointer;

                                           AActionName: Pointer;
                                           AActionTimeout: LongInt; //ms
                                           AActionEnabled: Boolean;
                                           AActionCondition: Pointer;

                                           ASetControlTextOptions: PClkSetTextOptionsAPI

                                          ): LongInt; cdecl;
var
  TemplateFileName: string;
  TempAction: TClkActionRec;
begin
  if InMemFS = nil then
  begin
    Result := -1;
    Exit;
  end;

  SetBasicActionOptions(ATemplateFileName, AActionName, acSetControlText, AActionTimeout, AActionEnabled, AActionCondition, TempAction, TemplateFileName);

  //set control text stuff
  SetPointedContentToString(@string(PWideChar(ASetControlTextOptions^.Text))[1], TempAction.SetTextOptions.Text);
  TempAction.SetTextOptions.ControlType := ASetControlTextOptions^.ControlType;

  AddActionToTemplate(TemplateFileName, TempAction);
  Result := 0;
end;


function AddCallTemplateActionToTemplate(ATemplateFileName: Pointer;

                                         AActionName: Pointer;
                                         AActionTimeout: LongInt; //ms
                                         AActionEnabled: Boolean;
                                         AActionCondition: Pointer;

                                         ACallTemplateOptions: PClkCallTemplateOptionsAPI

                                        ): LongInt; cdecl;
var
  TemplateFileName: string;
  TempAction: TClkActionRec;
begin
  if InMemFS = nil then
  begin
    Result := -1;
    Exit;
  end;

  SetBasicActionOptions(ATemplateFileName, AActionName, acCallTemplate, AActionTimeout, AActionEnabled, AActionCondition, TempAction, TemplateFileName);

  //call template stuff
  SetPointedContentToString(@string(PWideChar(ACallTemplateOptions^.TemplateFileName))[1], TempAction.CallTemplateOptions.TemplateFileName);
  SetPointedContentToString(@string(PWideChar(ACallTemplateOptions^.ListOfCustomVarsAndValues))[1], TempAction.CallTemplateOptions.ListOfCustomVarsAndValues);
  TempAction.CallTemplateOptions.EvaluateBeforeCalling := ACallTemplateOptions^.EvaluateBeforeCalling;

  TempAction.CallTemplateOptions.CallTemplateLoop.Enabled := ACallTemplateOptions^.CallTemplateLoop.Enabled;
  SetPointedContentToString(@string(PWideChar(ACallTemplateOptions^.CallTemplateLoop.Counter))[1], TempAction.CallTemplateOptions.CallTemplateLoop.Counter);
  SetPointedContentToString(@string(PWideChar(ACallTemplateOptions^.CallTemplateLoop.InitValue))[1], TempAction.CallTemplateOptions.CallTemplateLoop.InitValue);
  SetPointedContentToString(@string(PWideChar(ACallTemplateOptions^.CallTemplateLoop.EndValue))[1], TempAction.CallTemplateOptions.CallTemplateLoop.EndValue);
  TempAction.CallTemplateOptions.CallTemplateLoop.Direction := ACallTemplateOptions^.CallTemplateLoop.Direction;
  SetPointedContentToString(@string(PWideChar(ACallTemplateOptions^.CallTemplateLoop.BreakCondition))[1], TempAction.CallTemplateOptions.CallTemplateLoop.BreakCondition);
  TempAction.CallTemplateOptions.CallTemplateLoop.EvalBreakPosition := ACallTemplateOptions^.CallTemplateLoop.EvalBreakPosition;

  AddActionToTemplate(TemplateFileName, TempAction);
  Result := 0;
end;


function AddSleepActionToTemplate(ATemplateFileName: Pointer;

                                  AActionName: Pointer;
                                  AActionTimeout: LongInt; //ms
                                  AActionEnabled: Boolean;
                                  AActionCondition: Pointer;

                                  ASleepOptions: PClkSleepOptionsAPI

                                 ): LongInt; cdecl;
var
  TemplateFileName: string;
  TempAction: TClkActionRec;
begin
  if InMemFS = nil then
  begin
    Result := -1;
    Exit;
  end;

  SetBasicActionOptions(ATemplateFileName, AActionName, acSleep, AActionTimeout, AActionEnabled, AActionCondition, TempAction, TemplateFileName);

  //sleep stuff
  SetPointedContentToString(@string(PWideChar(ASleepOptions^.Value))[1], TempAction.SleepOptions.Value);

  AddActionToTemplate(TemplateFileName, TempAction);
  Result := 0;
end;


function AddSetVarActionToTemplate(ATemplateFileName: Pointer;

                                   AActionName: Pointer;
                                   AActionTimeout: LongInt; //ms
                                   AActionEnabled: Boolean;
                                   AActionCondition: Pointer;

                                   ASetVarOptions: PClkSetVarOptionsAPI

                                  ): LongInt; cdecl;
var
  TemplateFileName: string;
  TempAction: TClkActionRec;

  ListOfVarNames, ListOfVarValues, ListOfVarEvalBefore: TStringList;
begin
  if InMemFS = nil then
  begin
    Result := -1;
    Exit;
  end;

  SetBasicActionOptions(ATemplateFileName, AActionName, acSetVar, AActionTimeout, AActionEnabled, AActionCondition, TempAction, TemplateFileName);

  //SetVar stuff
  SetPointedContentToString(@string(PWideChar(ASetVarOptions^.ListOfVarNames))[1], TempAction.SetVarOptions.ListOfVarNames);
  SetPointedContentToString(@string(PWideChar(ASetVarOptions^.ListOfVarValues))[1], TempAction.SetVarOptions.ListOfVarValues);
  SetPointedContentToString(@string(PWideChar(ASetVarOptions^.ListOfVarEvalBefore))[1], TempAction.SetVarOptions.ListOfVarEvalBefore);

  Result := 0;

  ListOfVarNames := TStringList.Create;
  ListOfVarValues := TStringList.Create;
  ListOfVarEvalBefore := TStringList.Create;
  try
    ListOfVarNames.Text := TempAction.SetVarOptions.ListOfVarNames;
    ListOfVarValues.Text := TempAction.SetVarOptions.ListOfVarValues;
    ListOfVarEvalBefore.Text := TempAction.SetVarOptions.ListOfVarEvalBefore;

    if (ListOfVarNames.Count <> ListOfVarValues.Count) or (ListOfVarNames.Count <> ListOfVarEvalBefore.Count) then
    begin
      Result := -1;

      ListOfVarNames.Clear;
      ListOfVarValues.Clear;
      ListOfVarEvalBefore.Clear;

      ListOfVarNames.Add('$DLL_Err_Var$');
      ListOfVarValues.Add('The number of items from ListOfVarValues or ListOfVarEvalBefore, does not match the number of items from ListOfVarNames.');
      ListOfVarEvalBefore.Add('0');

      TempAction.SetVarOptions.ListOfVarNames := ListOfVarNames.Text;
      TempAction.SetVarOptions.ListOfVarValues := ListOfVarValues.Text;
      TempAction.SetVarOptions.ListOfVarEvalBefore := ListOfVarEvalBefore.Text;

      //Do not exit, simply create the bad action, then let the user debug it.
    end;
  finally
    ListOfVarNames.Free;
    ListOfVarValues.Free;
    ListOfVarEvalBefore.Free;
  end;

  AddActionToTemplate(TemplateFileName, TempAction);
end;


function AddWindowOperationsActionToTemplate(ATemplateFileName: Pointer;

                                             AActionName: Pointer;
                                             AActionTimeout: LongInt; //ms
                                             AActionEnabled: Boolean;
                                             AActionCondition: Pointer;

                                             AWindowOperationsOptions: PClkWindowOperationsAPI

                                            ): LongInt; cdecl;
var
  TemplateFileName: string;
  TempAction: TClkActionRec;
begin
  if InMemFS = nil then
  begin
    Result := -1;
    Exit;
  end;

  SetBasicActionOptions(ATemplateFileName, AActionName, acWindowOperations, AActionTimeout, AActionEnabled, AActionCondition, TempAction, TemplateFileName);

  //Window Operations stuff
  TempAction.WindowOperationsOptions.Operation := AWindowOperationsOptions^.Operation;
  SetPointedContentToString(@string(PWideChar(AWindowOperationsOptions^.NewX))[1], TempAction.WindowOperationsOptions.NewX);
  SetPointedContentToString(@string(PWideChar(AWindowOperationsOptions^.NewY))[1], TempAction.WindowOperationsOptions.NewY);
  SetPointedContentToString(@string(PWideChar(AWindowOperationsOptions^.NewWidth))[1], TempAction.WindowOperationsOptions.NewWidth);
  SetPointedContentToString(@string(PWideChar(AWindowOperationsOptions^.NewHeight))[1], TempAction.WindowOperationsOptions.NewHeight);
  TempAction.WindowOperationsOptions.NewPositionEnabled := AWindowOperationsOptions^.NewPositionEnabled;
  TempAction.WindowOperationsOptions.NewSizeEnabled := AWindowOperationsOptions^.NewSizeEnabled;

  AddActionToTemplate(TemplateFileName, TempAction);
  Result := 0;
end;


function AddFontProfileToFindSubControlActionInTemplate(ATemplateFileName: string; ActionIndex: Integer; AFindControlMatchBitmapText: TClkFindControlMatchBitmapText): Integer;
var
  ClkActions: TClkActionsRecArr;
  MemStream: TMemoryStream;
  n: Integer;
  DummyNotes: string;
begin
  Result := 0;
  if not InMemFS.FileExistsInMem(ATemplateFileName) then
    CreateNewTemplateStr(ATemplateFileName);

  MemStream := TMemoryStream.Create;
  try
    InMemFS.LoadFileFromMemToStream(ATemplateFileName, MemStream);
    MemStream.Position := 0;

    GetTemplateContentFromMemoryStream(ClkActions, DummyNotes, MemStream);

    if (ActionIndex < 0) or (ActionIndex > Length(ClkActions) - 1) then
    begin
      Result := -2;
      Exit;
    end;

    n := Length(ClkActions[ActionIndex].FindControlOptions.MatchBitmapText);
    SetLength(ClkActions[ActionIndex].FindControlOptions.MatchBitmapText, n + 1);
    ClkActions[ActionIndex].FindControlOptions.MatchBitmapText[n] := AFindControlMatchBitmapText;

    MemStream.Clear;
    GetTemplateContentAsMemoryStream(ClkActions, DummyNotes, MemStream);
    InMemFS.SaveFileToMem(ATemplateFileName, MemStream.Memory, MemStream.Size);
  finally
    MemStream.Free;
  end;
end;


function AddFontProfileToFindSubControlAction(ATemplateFileName: Pointer;
                                              AActionIndex: LongInt;
                                              AFindControlMatchBitmapText: PClkFindControlMatchBitmapTextAPI
                                             ): LongInt; cdecl;
var
  TemplateFileName: string;
  FindControlMatchBitmapText: TClkFindControlMatchBitmapText;
begin
  if InMemFS = nil then
  begin
    Result := -1;
    Exit;
  end;

  SetPointedContentToString(@string(PWideChar(ATemplateFileName))[1], TemplateFileName);

  if not InMemFS.FileExistsInMem(TemplateFileName) then
  begin
    Result := -1;
    Exit;
  end;

  SetPointedContentToString(@string(PWideChar(AFindControlMatchBitmapText^.ForegroundColor))[1], FindControlMatchBitmapText.ForegroundColor);
  SetPointedContentToString(@string(PWideChar(AFindControlMatchBitmapText^.BackgroundColor))[1], FindControlMatchBitmapText.BackgroundColor);
  SetPointedContentToString(@string(PWideChar(AFindControlMatchBitmapText^.FontName))[1], FindControlMatchBitmapText.FontName);
  FindControlMatchBitmapText.FontSize := AFindControlMatchBitmapText^.FontSize;
  FindControlMatchBitmapText.Bold := AFindControlMatchBitmapText^.Bold;
  FindControlMatchBitmapText.Italic := AFindControlMatchBitmapText^.Italic;
  FindControlMatchBitmapText.Underline := AFindControlMatchBitmapText^.Underline;
  FindControlMatchBitmapText.StrikeOut := AFindControlMatchBitmapText^.StrikeOut;
  FindControlMatchBitmapText.FontQuality := AFindControlMatchBitmapText^.FontQuality;
  FindControlMatchBitmapText.FontQualityUsesReplacement := AFindControlMatchBitmapText^.FontQualityUsesReplacement;
  SetPointedContentToString(@string(PWideChar(AFindControlMatchBitmapText^.FontQualityReplacement))[1], FindControlMatchBitmapText.FontQualityReplacement);
  SetPointedContentToString(@string(PWideChar(AFindControlMatchBitmapText^.ProfileName))[1], FindControlMatchBitmapText.ProfileName);

  Result := AddFontProfileToFindSubControlActionInTemplate(TemplateFileName, AActionIndex, FindControlMatchBitmapText);
end;


function ExecuteRemoteActionAtIndex(AActionIndex, AStackLevel: Integer; AVarReplacements: TStringList): Boolean;
const
  CUsesInMemFiles: array[Boolean] of string = (CREParam_FileLocation_ValueDisk, CREParam_FileLocation_ValueMem);
var
  Th: TClientThread;
  ServerResponse: string;
begin
  Result := False;

  Th := TClientThread.Create(True);   //without using thread, the client blocks both this UI and the server's UI, because it doesn't read  - some sort of deadlock
  try
    Th.ConnectTimeout := GeneralConnectTimeout;
    Th.Link := FRemoteAddress + CRECmd_ExecuteCommandAtIndex + '?' +
                                CREParam_ActionIdx + '=' + IntToStr(AActionIndex) + '&' +
                                CREParam_StackLevel + '=' + IntToStr(AStackLevel) + '&' +
                                CREParam_IsDebugging + '=' + IntToStr(Ord(False)) + '&' +
                                CREParam_FileLocation + '= ' + CUsesInMemFiles[False]; //this should come from a class field
    Th.Start;

    WaitForServerResponse(Th);

    ServerResponse := FastReplace_87ToReturn(Th.Result);

    if (Trim(ServerResponse) = '') or (Pos('$Control_Class$', ServerResponse) = 0) then // uses '$Control_Class$' as a way to find out if the result is a valid list of variables
      AVarReplacements.Values['$ServerResponse$'] := ServerResponse
    else
      AVarReplacements.Text := ServerResponse;

    Result := AVarReplacements.Values[CREResp_RemoteExecResponseVar] = '1';
  finally
    Th.Free;
  end;
end;


function PrepareFilesInServer(ATemplateFileName, AResponse: Pointer): LongInt; cdecl;
const
  CStackLevel: Integer = 0;  //Load only the main file. The others should be automatically handled by server.
var
  TemplateFileName: string;
  ClkActions: TClkActionsRecArr;
  MemStream: TMemoryStream;
  SetClientResponse: string;
  DummyNotes: string;
begin
  Result := 0;
  SetClientResponse := '';

  SetPointedContentToString(@string(PWideChar(ATemplateFileName))[1], TemplateFileName);
  if TemplateFileName = '' then
    Exit;

  try
    if GetServerFileExpectancy(FRemoteAddress) = CREResp_FileExpectancy_ValueFromClient then
    begin
      //Should send template and other files to server...
      if not InMemFS.FileExistsInMem(TemplateFileName) then
        CreateNewTemplateStr(TemplateFileName);

      MemStream := TMemoryStream.Create;
      try
        InMemFS.LoadFileFromMemToStream(TemplateFileName, MemStream);
        MemStream.Position := 0;

        GetTemplateContentFromMemoryStream(ClkActions, DummyNotes, MemStream);

        SetClientResponse := 'LoadTemplateInExecList: ' + SetClientTemplateInServer(FRemoteAddress, TemplateFileName, ClkActions, CStackLevel);
        SetClientResponse := SetClientResponse + ',  SendMissingFilesToServer: ' + SendMissingFilesToServer(FRemoteAddress, ClkActions);

        Result := 0;
      finally
        MemStream.Free;
      end;
    end;

    Result := SetPointedContentFromString(SetClientResponse, AResponse);
  except
    on E: Exception do
      Result := SetPointedContentFromString(E.Message, AResponse);
  end;
end;


function ExecuteActionAtIndex(AActionIndex, AStackLevel: LongInt): Boolean; cdecl;
begin
  Result := ExecuteRemoteActionAtIndex(AActionIndex, AStackLevel, FAllVarReplacements);
end;


function GetListOfFilesFromClientInMem(AResponse: Pointer): LongInt; cdecl;
var
  ListOfFiles: TStringList;
begin
  ListOfFiles := TStringList.Create;
  try
    try
      InMemFS.ListMemFiles(ListOfFiles);
      Result := SetPointedContentFromString(ListOfFiles.Text, AResponse);
    except
      on E: Exception do
        Result := SetPointedContentFromString(E.Message, AResponse);
    end;
  finally
    ListOfFiles.Free;
  end;
end;


function GetTemplateContentFromClientInMemAsString(ATemplateFileName, AResponse: Pointer): LongInt; cdecl;
var
  FileContent: TStringList;
  TemplateFileName: string;
  Buffer: TBytes;
  Dest: Pointer;
begin
  Result := 0;
  SetPointedContentToString(@string(PWideChar(ATemplateFileName))[1], TemplateFileName);
  if TemplateFileName = '' then
    Exit;

  if not InMemFS.FileExistsInMem(TemplateFileName) then
  begin
    Result := SetPointedContentFromString('File not found.', AResponse);
    Exit;
  end;

  FileContent := TStringList.Create;
  try
    try
      Result := InMemFS.GetFileSize(TemplateFileName);
      SetLength(Buffer, Result);

      Dest := @Buffer[0];
      InMemFS.LoadFileFromMem(TemplateFileName, Dest);
      Move(Dest^, AResponse^, Min(Result, CMaxSharedStringLength)); //limit to 10MB
    except
      on E: Exception do
        Result := SetPointedContentFromString(E.Message, AResponse);
    end;
  finally
    FileContent.Free;
  end;
end;


function StopTemplateExecution(AStackLevel: LongInt; AResponse: Pointer): LongInt; cdecl;
var
  Resp: string;
begin
  Resp := StopRemoteTemplateExecution(FRemoteAddress, AStackLevel);
  Result := SetPointedContentFromString(Resp, AResponse);
end;


procedure StartFileProviderClientThread; cdecl;
begin
  FPollForMissingServerFilesTh.Start;
end;


procedure TerminateFileProviderClientThread; cdecl;
begin
  FPollForMissingServerFilesTh.Terminate;
end;


procedure AddListOfAccessibleDirsToFileProviderClient(AListOfDirs: Pointer); cdecl;
var
  AList: TStringList;
  ListAsString: string;
begin
  AList := TStringList.Create;
  try
    SetPointedContentToString(@string(PWideChar(AListOfDirs))[1], ListAsString);
    AList.Text := ListAsString;

    FPollForMissingServerFilesTh.AddListOfAccessibleDirs(AList);
  finally
    AList.Free;
  end;
end;


procedure AddListOfAccessibleFileExtensionsToFileProviderClient(AListOfExtensions: Pointer); cdecl;
var
  AList: TStringList;
  ListAsString: string;
begin
  AList := TStringList.Create;
  try
    SetPointedContentToString(@string(PWideChar(AListOfExtensions))[1], ListAsString);
    AList.Text := ListAsString;

    FPollForMissingServerFilesTh.AddListOfAccessibleFileExtensions(AList);
  finally
    AList.Free;
  end;
end;


function FileProviderClientThreadDone: Boolean; cdecl;
begin
  Result := FPollForMissingServerFilesTh.Done;
end;


procedure SetFileProviderClientConnectTimeout(ATimeout: LongInt); cdecl; //should be called before StartFileProviderClientThread to actually use the new timeout
begin
  if FPollForMissingServerFilesTh = nil then
    Exit;

  FPollForMissingServerFilesTh.ConnectTimeout := ATimeout;
end;


procedure ClearClientInMemFS; cdecl;
begin
  InMemFS.Clear;
end;


procedure ClearServerInMemFS; cdecl;
begin
  ClearInMemFileSystem(FRemoteAddress);
end;



exports
  InitClickerClient,
  DoneClickerClient,
  SetServerAddress,
  GetServerAddress,
  TestConnectionToServer,

  CreateNewTemplate,

  AddClickActionToTemplate,
  AddExecAppActionToTemplate,
  AddFindControlActionToTemplate,
  AddFindSubControlActionToTemplate,
  AddSetControlTextActionToTemplate,
  AddCallTemplateActionToTemplate,
  AddSleepActionToTemplate,
  AddSetVarActionToTemplate,
  AddWindowOperationsActionToTemplate,

  AddFontProfileToFindSubControlAction,

  PrepareFilesInServer,
  ExecuteActionAtIndex,
  GetListOfFilesFromClientInMem,
  GetTemplateContentFromClientInMemAsString,
  StopTemplateExecution,

  StartFileProviderClientThread,
  TerminateFileProviderClientThread,
  AddListOfAccessibleDirsToFileProviderClient,
  AddListOfAccessibleFileExtensionsToFileProviderClient,
  FileProviderClientThreadDone,
  SetFileProviderClientConnectTimeout,

  ClearClientInMemFS,
  ClearServerInMemFS;
begin
  ClientLastError := '';
end.

